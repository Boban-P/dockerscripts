#!/bin/bash

# Web server
# Usage: $0 start app-server-ip:port [[port-forward-ip:]hostport] | stop | phpAdd ip:port
#        app-server-ip : ip address or host name of application server, additional
#                        application servers can be added by appAdd command
#        port-forward-ip: ip address of host system from which incomming traffic will be
#                        forwarded to containers listening port.
#                        if omitted all ips is used.

start="$(dockerinfo startup_command "${WEB_IMAGE}")"
mapfile -t exists<<<"$(docker ps -f 'name=^'"${WEB_CONTAINER}"'\d*$' -q)"

if [[ (${#exists[@]} -eq 1) && (-z "${exists[0]}") ]]; then
    exists=()
fi

# create document root if it do not exits.
if [[ ! -d "${WEB_ROOT}" ]]; then
    mkdir -p "${WEB_ROOT}"
    webroot_update
fi

# get exposed port
if [[ -z "${WEB_LISTEN_PORT}" ]]; then
    WEB_LISTEN_PORT=$(dockerinfo variable "${WEB_IMAGE}" LISTEN_PORT)
else
    export DOCKER_OPTION_listen_port="-e=LISTEN_PORT=${WEB_LISTEN_PORT}"
fi

if [[ (${#exists[@]} -eq 0) || ("${1}" = "start") ]]; then

    if [[ -n "$3" ]]; then
        export DOCKER_OPTION_bind_port="--publish=${3}:${WEB_LISTEN_PORT}"
    fi

    export SITE_PATH_web_root=type=bind,source="${WEB_ROOT}",destination="${DOCUMENT_ROOT}"
    export DOCKER_OPTION_document_root='-e=DOCUMENT_ROOT='"${DOCUMENT_ROOT}"
    export DOCKER_OPTION_site_name="-e=SITE_NAME=${SITE_NAME}"
    export DOCKER_OPTION_site_alias='-e=SITE_ALIAS='"${SITE_ALIAS}"
    if [[ -n "${WEB_LOG_LEVEL}" ]]; then
        export DOCKER_OPTION_site_log_level="-e=SITE_LOG_LEVEL=${WEB_LOG_LEVEL}"
    fi
    # mounting assets as readonly
    eval "$(mount_asset 1 0)"
    count=${#exists[@]}
    if [[ -n "${WEB_LOG_FILE}" ]]; then
        logfile="$(dirname "${WEB_LOG_FILE}")/${count}.$(basename "${WEB_LOG_FILE}")"
        export SITE_PATH_logfile="type=bind,source=${logfile},destination=/var/log/apache2/access.log"
        if [[ ! -f "${logfile}" ]]; then
            if [[ ! -d "$(dirname "${logfile}")" ]]; then
                mkdir -p "$(dirname "${logfile}")"
            fi
            touch "${logfile}"
        fi
    fi
    if [[ -n "${WEB_ERROR_LOG_FILE}" ]]; then
        logfile="$(dirname "${WEB_ERROR_LOG_FILE}")/${count}.$(basename "${WEB_ERROR_LOG_FILE}")"
        export SITE_PATH_logfile="type=bind,source=${logfile},destination=/var/log/apache2/error.log"
        if [[ ! -f "${logfile}" ]]; then
            if [[ ! -d "$(dirname "${logfile}")" ]]; then
                mkdir -p "$(dirname "${logfile}")"
            fi
            touch "${logfile}"
        fi
    fi

    if [[ -n "${APP_ENVIRONMENT}" ]]; then
        export DOCKER_OPTION_php_env="-e=PHP_ENVIRONMENT=${APP_ENVIRONMENT}"
    fi
fi

case "$1" in
    start)
        container="${WEB_CONTAINER}${#exists[@]}"
        # argument count 2
        if [[ $# -lt 2 ]]; then
            echo "application server url required"
            exit
        fi
        cmd "${container}" "${WEB_IMAGE}" -d -e ENABLE_MODE_balancer=1 -e PHP_BALANCER_URL="${2}" --  -- "${start}"
        ;;
    stop)
        if [[ ${#exists[@]} -gt 0 ]]; then
            container="${WEB_CONTAINER}$(( ${#exists[@]} - 1))"
            cmd "${container}" "${WEB_IMAGE}" -- apache2ctl stop
        fi
        ;;
    stopall)
        count=${#exists[@]}
        while [[ ${count} -gt 0 ]]; do
            container="${WEB_CONTAINER}$(( --count ))"
            cmd "${container}" "${WEB_IMAGE}" -- apache2ctl stop
        done
        ;;
    update)
        webroot_update
        ;;
    phpAdd)
        if [[ $# -lt 3 ]]; then
            echo "server id and application server url required"
            exit;
        fi
        cmd "${WEB_CONTAINER}${2}" "${WEB_IMAGE}" -- /phpBalancer.sh add "${3}"
        ;;
    phpRemove)
        if [[ $# -lt 2 ]]; then
            echo "server id and application url required"
            exit;
        fi
        cmd "${WEB_CONTAINER}${2}" "${WEB_IMAGE}" -- /phpBalancer.sh remove "${3}"
        ;;
    url)
        id=${2:-0}
        docker port "${WEB_CONTAINER}${id}" "${WEB_LISTEN_PORT}"
        ;;
    *)
        id=0
        if [[ (-z "${1//[0-9]/}") && (${1} -lt ${#exists[@]}) ]]; then
            id=${1}
            shift
        fi
        cmd "${WEB_CONTAINER}${id}" "${WEB_IMAGE}" -ti -e ENABLE_MODE_balancer=1 -- -ti -- "$@"
        ;;
esac
