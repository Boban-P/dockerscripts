#!/bin/bash

# Php application server
# Usage: $0 start [dbip] [ip:port] | stop
#              dbip : ip address of database server, a domain "dbhost"
#                     is made available to application server for
#                     accessing this ip.
#              optional ip:port is the ip and port of host system the
#              application will listen, format can be ip:port or port
#    eg: $0 start 0.0.0.0:80
#        $0 start 80
# TODO: implement argument and state checking.

start="$(dockerinfo startup_command "${APP_IMAGE}")"
mapfile -t exists <<< "$(docker ps -f 'name=^'"${APP_CONTAINER}"'\d*$' -q)"

if [[ (${#exists[@]} -eq 1) && (-z "${exists[0]}") ]]; then
    exists=()
fi

if [[ -z "${APP_LISTEN_PORT}" ]]; then
    APP_LISTEN_PORT=$(dockerinfo variable "${APP_IMAGE}" LISTEN_PORT)
else
    export DOCKER_OPTION_listen_port="-e=LISTEN_PORT=${APP_LISTEN_PORT}"
fi

if [[ ("${#exists[@]}" -eq 0) || ("${1}" = "start") ]]; then
    # mount document root.
    if [[ -n "${APP_WRITE_MOUNT//0/}" ]]; then
        export SITE_PATH_document_root=type=bind,source="${WEB_ROOT}",destination="${DOCUMENT_ROOT}"
    else
        export SITE_PATH_document_root=type=bind,source="${WEB_ROOT}",destination="${DOCUMENT_ROOT}",readonly
    fi

    # create document root if it do not exits.
    if [[ ! -d "${APP_ASSET}" ]]; then
        mkdir -p "${APP_ASSET}"
        webroot_update "${APP_ASSET}" "${APP_ASSET_REPO}" "${APP_REPO_BRANCH}"
    fi

    if [[ (-n "${APP_PRIVATE_ROOT}") && (! -d "${APP_PRIVATE_ROOT}") ]]; then
        mkdir -p "${APP_PRIVATE_ROOT}"
    fi

    # Create asset directories/files if not exists
    # mount asset writable.
    eval "$(mount_asset 0 1)"

    if [[ "${APP_DEBUG_MAP_PORT:-0}" == "1" ]]; then
        container_port=$(dockerinfo variable "${APP_IMAGE}" XDEBUG_PORT)
        if [[ ! -z "${container_port}" ]]; then
            if [[ -z "${APP_DEBUG_PORT}" ]]; then
                APP_DEBUG_PORT=${container_port}
            fi
            mapip=${hostip%%:*}
            if [[ "${mapip}" == "${3}" ]]; then
                mapip=0.0.0.0
            fi
            export DOCKER_OPTION_debug_portmap="-p=${mapip}:${APP_DEBUG_PORT}:${container_port}"
        fi
    fi
    
    mapfile -t lines <<<"$(env | grep '^APP_ENV_')"
    for line in "${lines[@]}"; do
        if [[ -n "${line}" ]]; then
			value=${line#APP_ENV_}
            name="${value%%=*}"
            variable="${value#*=}"
            export "DOCKER_OPTION_env_${name}=-e=${name}=${variable}"
        fi
    done
    mapfile -t lines <<<"$(env | grep '^APP_MOUNT_')"
    for line in "${lines[@]}"; do
        if [[ -n "${line}" ]]; then
			value=${line#APP_MOUNT_}
            name="${value%%=*}"
			IFS="=" read -r -a value<<<"${value#*=}"
            if [[ ${#value[@]} -eq 2 ]]; then
                echo export "SITE_PATH_${name}=type=bind,source=${value[1]},destination=${value[0]}"
                export "SITE_PATH_${name}=type=bind,source=${value[1]},destination=${value[0]}"
            fi
        fi
    done
fi

case "$1" in
    start)
        # get arguments for db, mail and dns
        
        if [[ $# -lt 2 ]]; then
            echo "usage: $0 [-d dbhost_ip] [-m mailer] [-n dns] [[host_forward_ip:]port]"
            exit 1;
        fi

        shift
        while [[ $# -gt 0 ]]; do
            case ${1} in
                -m)
                    export DOCKER_OPTION_mailer="-e=MAIL_FORWARD_HOST=${2}"
                    shift
                    ;;
                -n)
                    export DOCKER_OPTION_dns="-e=DNS_SERVER=${2}"
                    shift
                    ;;
                -d)
                    database=${2}
                    shift
                    ;;
                *)
                    IFS=: read -r -a ips<<<"${1}:"
                    hostip="$(IFS=:; echo "${ips[*]:0:2}")"
                    ;;
            esac
            shift
        done

        cmd "${APP_CONTAINER}${#exists[@]}" "${APP_IMAGE}" -d -w "${DOCUMENT_ROOT}" -p "${hostip#:*}:${APP_LISTEN_PORT}" --  -- "${start}"
        test -n "${database}" && cmd "${APP_CONTAINER}${#exists[@]}" "${APP_IMAGE}" host.sh add "dbhost" "${database}"
        ;;
    stop)
        if [[ ${#exists[@]} -gt 0 ]]; then
            container="${APP_CONTAINER}$(( ${#exists[@]} - 1))"
            docker stop "${container}"
        fi
        ;;
    stopall)
        count=${#exists[@]}
        while [[ ${count} -gt 0 ]]; do
            container="${APP_CONTAINER}$(( --count ))"
            docker stop "${container}"
        done
        ;;
    update)
        webroot_update "${APP_ASSET}" "${APP_ASSET_REPO}" "${APP_REPO_BRANCH}"
        ;;
    hostAdd)
        if [[ $# -lt 3 ]]; then
            exit 1
        fi
        count=${#exists[@]}
        start=0
        while [[ ${start} -lt ${count} ]]; do
            cmd "${APP_CONTAINER}${start}" "${APP_IMAGE}" host.sh add "$2" "$3"
            ((start++))
        done
        ;;
    hostRemove)
        if [[ $# -lt 3 ]]; then
            exit 1
        fi

        count=${#exists[@]}
        start=0
        while [[ ${start} -lt ${count} ]]; do
            cmd "${APP_CONTAINER}${start}" "${APP_IMAGE}" host.sh remove "$2" "$3"
            ((start++))
        done
        ;;
    url)
        id=${2:-0}
        docker port "${APP_CONTAINER}${id}" "${APP_LISTEN_PORT}"
        ;;
    *)
        cmd "${APP_CONTAINER}0" "${APP_IMAGE}" -ti -- -ti -- "$@"
        ;;
esac
