#!/bin/bash

# Application to manage database server
# Usage: $0 start [[host-ip:]port]|stop
#      : $0 startmaster|stopmaster
#      : $0 startslave id masterip|stopslave
#      : $0 addSlave slaveip

exists=$(docker ps -q -f 'name=^'"${DB_CONTAINER}"'$')
start="$(dockerinfo startup_command "${DB_IMAGE}")"

if [[ -z "${DB_PORT}" ]]; then
    DB_PORT="$(dockerinfo variable "${DB_IMAGE}" SERVER_PORT)"
else
    export DOCKER_OPTION_listen_port="-e=SERVER_PORT=${DB_PORT}"
fi

case "$1" in
    start)
        if [[ -z "${exists}" ]]; then

            if [[ ! -d "${DB_DATA_DIR}" ]]; then
                mkdir -p "${DB_DATA_DIR}"
            fi
            export SITE_PATH_data_dir="type=bind,source=${DB_DATA_DIR},destination=/var/lib/mysql"

            if [[ -z "$(ls -A "${DB_DATA_DIR}")" ]]; then
                # install mysql database.
                cmd "${DB_CONTAINER}" "${DB_IMAGE}" mysql_install_db --user=mysql --auth-root-authentication-method=socket --auth-root-socket-user=root --basedir=/usr --datadir=/var/lib/mysql --skip-test-db --force
            fi
            # Start server
            if [[ $# -gt 1 ]]; then
                cmd "${DB_CONTAINER}" "${DB_IMAGE}" -d -p "${2}:${DB_PORT}" -- -- "${start}"
            else
                cmd "${DB_CONTAINER}" "${DB_IMAGE}" -d -- -- "${start}"
            fi
            # Create database and user if not already exists.
            if [[ ! -d "${DB_DATA_DIR}/${DB_NAME}" ]]; then
                # wait for  /var/run/mysqld/mysqld.sock to appear
                sleep 1
                # Create database
                cmd "${DB_CONTAINER}" "${DB_IMAGE}" /createdb "${DB_NAME}"
                cmd "${DB_CONTAINER}" "${DB_IMAGE}" /createUser "${DB_USER}" '%' "${DB_PASSWORD}"
                cmd "${DB_CONTAINER}" "${DB_IMAGE}" /execute 'GRANT ALL ON `'"${DB_NAME}"'`.*'" TO "'`'"${DB_USER}"'`'
            fi
        fi
        ;;
    stop)
        test -n "${exists}" && cmd "${DB_CONTAINER}" "${DB_IMAGE}" -- /etc/init.d/mysql stop
        echo ""
        ;;
    url)
        docker port "${DB_CONTAINER}" "${DB_PORT}"
        ;;
    *)
        cmd "${DB_CONTAINER}" "${DB_IMAGE}" -ti -- -ti -- "$@"
        ;;
esac
