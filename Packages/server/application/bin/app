#!/bin/bash

set -ae
# application server
# Usage: $0 start [dbip] [ip:port] | stop
#              dbip : ip address of database server, a domain "dbhost"
#                     is made available to application server for
#                     accessing this ip.
#              optional ip:port is the ip and port of host system the
#              application will listen, format can be ip:port or port
#    eg: $0 start 0.0.0.0:80
#        $0 start 80
# TODO: implement argument and state checking.

show_help() {
    echo "Usage: $0 [options] command [args]"
    echo "Options:
    --help              : show this help and exit
    -d | --db           : database server ip
    -i | --pubiship     : publised ip
    -p | --port         : published port
    -n | --dns          : dns server
    -m | --mail         : mail server
    --id                : id of container app, a natural number,
                          if not specified,
                            default to largest running container id.
                            or minimum possible id in case of start command.
Commands:
    start               : start new application server
    stop                : stop an application server specified by --id,
    stopall             : stop all instance of application server
    url                 : get ip address of application server specified by --id
    update              : update application source from git repository app_asset_repo
    backup              : backup private_root directory to private_root_backupt
    saveState           : update the backup to private_root_source
    restore             : restore application data files from last saved state.
    hostadd domain ip   : add hosts file entry for all application server
    hostrm domain ip    : remove hosts file entry from all application server
    *                   : execute custom command in application server, server is choosem by --id parameter.
    "
}

[[ ! -f "${DIR}/app.conf" ]] && >&2 echo "application configuration file not found" && exit 1
# include default values
source "$(dirname "$(dirname "${BASH_SOURCE[0]}")")/app.conf"
source "${DIR}/app.conf"

unset publishIp
unset http_port
unset dns
unset mail
unset db
unset move
unset CID

args=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --publiship|-i)
            publishIp="$2"
            shift
            ;;
        --port|-p)
            http_port="$2"
            shift
            ;;
        --dns|-n)
            dns="$2"
            shift
            ;;
        --mail|-m)
            mail="$2"
            shift
            ;;
        --db|-d)
            db="$2"
            shift
            ;;
        --id)
            if [[ "$2" =~ '^[0-9]+$' ]]; then
                CID="$2"
            else
                >&2 echo "option --id needs to be positive integer" && exit 1
            fi
            shift
            ;;
        start|stop|stopall|update|url|hostadd|hostrm)
            args+=("$1")
            move=1
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
        # for custom command don't do anything.
            if [[ -z "${move}" ]]; then
                args+=("$@")
                break;
            else
                args+=("$1")
            fi
        ;;
    esac
    shift
done
set -- "${args[@]}"

if [[ (-z "${APP_IMAGE}") || (-z "${APP_CONTAINER}") ]]; then
    echo "CONFIG don not contain APP_IMAGE or APP_CONTAINER" >&2
    exit 1
fi

# application server
APP_ASSET="${APP_ASSET:-"${DATA}/www"}"
APP_PRIVATE_ROOT="${APP_PRIVATE_ROOT:-"${ASSET}/www"}"
APP_REPO_BRANCH="${APP_REPO_BRANCH:-development}"
APP_DEBUG_MAP_PORT="${APP_DEBUG_MAP_PORT:-0}"
DOCUMENT_ROOT="${DOCUMENT_ROOT:-"/home/www"}"
APP_WRITE_MOUNT="${APP_WRITE_MOUNT:-1}"

mapfile -t exists <<< "$(docker ps -f 'name=^'"${APP_CONTAINER}${CID:-\d*}"'$' --format '{{.Names}}')"

if [[ (${#exists[@]} -eq 1) && (-z "${exists[0]}") ]]; then
    exists=()
fi
if [[ -z "${CID}" ]]; then
    MAX_ID=0;
    for cname in "${exists[@]}"; do
        id=${cname#${APP_CONTAINER}}
        ids+=("${id}")
        if [[ ${id} -gt ${MAX_ID} ]]; then
            MAX_ID=${id}
        fi
    done
    if [[ ${#ids[@]} -eq $((MAX_ID + 1)) ]]; then
        NEXT_ID=$((MAX_ID + 1))
    else
        NEXT_ID=0
        while [[ ${NEXT_ID} -le ${MAX_ID} ]]; do
            if [[ " ${MAX_ID[*]} "] != *" ${NEXT_ID} "* ]]; then
                break;
            fi
            ((++NEXT_ID))
        done
    fi
else
    MAX_ID=${CID}
    NEXT_ID=${CID}
fi

if [[ -z "${APP_LISTEN_PORT}" ]]; then
    APP_LISTEN_PORT=$(dockerinfo variable "${APP_IMAGE}" LISTEN_PORT)
else
    export DOCKER_OPTION_listen_port="-e=LISTEN_PORT=${APP_LISTEN_PORT}"
fi

initialize_container() {
    # mount document root.
    [[ -n "${mail}" ]] && export DOCKER_OPTION_mailer="-e=MAIL_FORWARD_HOST=${mail}"
    [[ -n "${dns}" ]] && export DOCKER_OPTION_dns="-e=DNS_SERVER=${dns}"

    if [[ -n "${APP_WRITE_MOUNT//0/}" ]]; then
        export SITE_PATH_document_root=type=bind,source="${APP_ASSET}",destination="${DOCUMENT_ROOT}"
    else
        export SITE_PATH_document_root=type=bind,source="${APP_ASSET}",destination="${DOCUMENT_ROOT}",readonly
    fi

    # create document root if it do not exits.
    if [[ ! -d "${APP_ASSET}" ]]; then
        mkdir -p "${APP_ASSET}"
        test -n "${APP_ASSET_REPO}" && (git clone --depth 1 -b "${APP_REPO_BRANCH}" "${APP_ASSET_REPO}" "${APP_ASSET}" || rm -rf "${APP_ASSET}")
    fi

    if [[ (-n "${APP_PRIVATE_ROOT}") && (! -d "${APP_PRIVATE_ROOT}") ]]; then
        mkdir -p "${APP_PRIVATE_ROOT}"
    fi

    if [[ (-n ${APP_PRIVATE_ROOT}) && (-n ${DOCUMENT_ROOT}) ]]; then
        dirs=(${APP_DOCUMENT_ASSETS} ${APP_PRIVATE_ASSETS})
        for dir in "${dirs[@]}"; do
            # Mounting APP_PRIVATE_ROOT/DIR TO DOCUMENT_ROOT/DIR
            name="$(sed 's/[^a-zA-Z0-9_]/_/g' <<<"${dir}")"
            export "SITE_PATH_${name}=type=bind,source=${APP_PRIVATE_ROOT%/}/${dir},destination=${DOCUMENT_ROOT%/}/${dir}"
        done
        if [[ (-n "${APP_PRIVATE_RESOURCE_TYPE}") && (-n "${APP_PRIVATE_ROOT_SOURCE}") ]]; then
        
            case "${APP_PRIVATE_RESOURCE_TYPE}" in
            s3)
                [[ -d  "${APP_PRIVATE_ROOT}" ]] || mkdir -p "${APP_PRIVATE_ROOT}"
                # copy files if directory is empty.
                [[ -n "$(find "${APP_PRIVATE_ROOT}" -maxdepth 0 -type d -empty 2>/dev/null)" ]] && \
                    s3cmd -rp get "${APP_PRIVATE_ROOT_SOURCE%/}/" "${APP_PRIVATE_ROOT%/}/"
                ;;
            nfs)
                [[ -d  "${APP_PRIVATE_ROOT}" ]] || mkdir -p "${APP_PRIVATE_ROOT}"
                # mount directory if not already mounted.
                mountpoint -q "${APP_PRIVATE_ROOT}" && \
                    sudo mount -t nfs "${APP_PRIVATE_ROOT_SOURCE}" ${APP_PRIVATE_ROOT}
                ;;
            esac
        fi
    fi
    
    if [[ "${APP_DEBUG_MAP_PORT:-0}" == "1" ]]; then
        container_port=$(dockerinfo variable "${APP_IMAGE}" REMOTE_DEBUG_PORT)
        if [[ -n "${container_port}" ]]; then
            if [[ -z "${APP_DEBUG_PORT}" ]]; then
                APP_DEBUG_PORT=${container_port}
            fi
            export DOCKER_OPTION_debug_portmap="-p=${debug_ip:-0.0.0.0}:${APP_DEBUG_PORT}:${container_port}"
        fi
    fi
    mapfile -t lines <<<"$(env | grep '^APP_ENV_')"
    for line in "${lines[@]}"; do
        if [[ -n "${line}" ]]; then
			value=${line#APP_ENV_}
            name="${value%%=*}"
            variable="${value#*=}"
            export "DOCKER_OPTION_env_${name}=-e=${name}=${variable}"
        fi
    done
    mapfile -t lines <<<"$(env | grep '^APP_MOUNT_')"
    for line in "${lines[@]}"; do
        if [[ -n "${line}" ]]; then
			value=${line#APP_MOUNT_}
            name="${value%%=*}"
			IFS="=" read -r -a value<<<"${value#*=}"
            if [[ ${#value[@]} -eq 2 ]]; then
                export "SITE_PATH_${name}=type=bind,source=${value[1]},destination=${value[0]}"
            fi
        fi
    done

    if [[ -n "${publishIp}" ]]; then
        export "DOCKER_OPTION_publish_port=--publish=${publishIp}:${port}:${APP_LISTEN_PORT}"
    fi
}

case "$1" in
    start)
        # get arguments for db, mail and dns
        start="$(dockerinfo startup_command "${APP_IMAGE}")"
        if [[ (-n ${CID})  && (${#exists[@]} -ne 0) ]]; then
            >&2 echo "container already running"
            exit 1
        fi
        initialize_container
        if cmd "${APP_CONTAINER}${NEXT_ID}" "${APP_IMAGE}" -d -w "${DOCUMENT_ROOT}" --  -- "${start}"; then
            if [[ -n "${db}" ]]; then
                docker exec "${APP_CONTAINER}${NEXT_ID}" host.sh add "dbhost" "${db}"
            fi
        else
            exit 1
        fi
        ;;
    stop)
        if [[ ${#exists[@]} -gt 0 ]]; then
            docker stop "${APP_CONTAINER}${MAX_ID}"
        fi
        ;;
    restart)
        if [[ ${#exists[@]} -gt 0 ]]; then
            ip="$(docker port "${APP_CONTAINER}${MAX_ID}" "${APP_LISTEN_PORT}")"
            docker stop "${APP_CONTAINER}${MAX_ID}"
            initialize_container
            [[ -n "${ip}" ]] && export "DOCKER_OPTION_publish_port=--publish=${ip}:${APP_LISTEN_PORT}"

            if cmd "${APP_CONTAINER}${MAX_ID}" "${APP_IMAGE}" -d -w "${DOCUMENT_ROOT}" --  -- "${start}"; then
                if [[ -n "${db}" ]];then
                    docker exec "${APP_CONTAINER}${MAX_ID}" host.sh add "dbhost" "${db}"
                fi
            else
                exit 1
            fi
        fi
        ;;
    stopall)
        for container in "${exists[@]}"; do
            docker stop "${container}"
        done
        ;;
    update)
        if [[ -d "${APP_ASSET}/.git" ]]; then
            test -n "${APP_ASSET_REPO}" && git -C "${APP_ASSET}" pull origin "${APP_REPO_BRANCH}" >/dev/null
        else
            test -n "${APP_ASSET_REPO}" && (git clone --depth 1 -b "${APP_REPO_BRANCH}" "${APP_ASSET_REPO}" "${APP_ASSET}" || rm -rf "${APP_ASSET}")
        fi
        ;;
    backup)
        echo backup called
        [[ ! -d  "${APP_PRIVATE_ROOT}" ]] && >&2 echo "nothing to backup" && exit 1
        if [[ -n "${APP_PRIVATE_ROOT_BACKUP}" ]]; then
            s3cmd sync --delete-removed "${APP_PRIVATE_ROOT_BACKUP%/}/.git/" "${APP_PRIVATE_ROOT%/}/.git/"
        fi
        if [[ ! -d "${APP_PRIVATE_ROOT%/}/.git" ]]; then
            git -C "${APP_PRIVATE_ROOT}" init
            git -C "${APP_PRIVATE_ROOT}" config --add user.name "applicationscript"
            git -C "${APP_PRIVATE_ROOT}" config --add user.email "applicationscript@mahisham.in"
        fi

        git -C "${APP_PRIVATE_ROOT}" add -A
        git -C "${APP_PRIVATE_ROOT}" commit -m "application backup"
        s3cmd sync --delete-removed "${APP_PRIVATE_ROOT%/}/.git/" "${APP_PRIVATE_ROOT_BACKUP%/}/.git/"
        ;;
    saveState)
        [[ ! -d  "${APP_PRIVATE_ROOT}" ]] && >&2 echo "nothing to backup" && exit 1
        s3cmd sync --rexclude "^\.git" --delete-removed "${APP_PRIVATE_ROOT%/}/" "${APP_PRIVATE_ROOT_SOURCE%/}/"
        ;;
    restore)
        [[ ! -d  "${APP_PRIVATE_ROOT}" ]] && >&2 echo "nothing to backup" && exit 1
        s3cmd sync --rexclude "^\.git" --delete-removed "${APP_PRIVATE_ROOT_SOURCE%/}/" "${APP_PRIVATE_ROOT%/}/"
        ;;
    hostadd)
        if [[ $# -lt 3 ]]; then
            >&2 echo "usage: hostadd domain ip"
            exit 1
        fi
        for container in "${exists[@]}"; do
            docker exec "${container}" host.sh add "$2" "$3"
        done
        ;;
    hostrm)
        if [[ $# -lt 4 ]]; then
            >&2 echo "usage hostrm domain ip"
            exit 1
        fi
        for container in "${exists[@]}"; do
            docker exec "${container}" host.sh remove "$2" "$3"
        done
        ;;
    url)
        if [[ ${#exists[@]} -gt 0 ]]; then
            docker port "${APP_CONTAINER}${MAX_ID}" "${APP_LISTEN_PORT}"
        fi
        ;;
    *)
        if [[ ${#exists[@]} -gt 0 ]]; then
            docker exec -ti "${APP_CONTAINER}${MAX_ID}" "$@"
        else
            initialize_container
            cmd "${APP_CONTAINER}${MAX_ID}" "${APP_IMAGE}" -ti -- -- "$@"
        fi
        ;;
esac
