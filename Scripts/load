#!/bin/bash

load_help () {
    echo "Usage: $1 $2 [command [args ...]]"
    echo "Commands"
    local cpath
    IFS=: read -r -a cpath<<<"${SCRIPT_DIR}/function:${path}"
    mapfile -t commands <<< "$(/usr/bin/uniq <(IFS=: /usr/bin/find "${cpath[@]}" -maxdepth 1 -executable -type f -printf '%f\n' | /usr/bin/sort))"
    for file in "${commands[@]}"; do
	echo $'\t'"${file}"
    done
}

export SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
export SCRIPT_DIR="$(dirname "${SCRIPT_PATH}")"

# TAG="$1"
SERVICE_DIR="${1%/}"
shift

if [[ ! -d "${SERVICE_DIR}" ]]; then
    echo "SERVICE not found while checking for directory ${SERVICE_DIR}" >&2
    exit 1
fi

export ASSET="${SERVICE_DIR}/Assets"
export DATA="${SERVICE_DIR}/Data"

export DIR="${SERVICE_DIR}"
export SERVICE_DIR

if [[ -f "${DIR}/conf" ]]; then
    _conf_file="${DIR}/conf"
    #unset all configuration variable
    source "${SCRIPT_DIR}/conf"
    # export all defined variables in the configuration file.
    # cd "${DIR}"
    set -a
    source "${_conf_file}"
    set +a
else
    echo "CONFIGURATION FILE not found in ${SERVICE_DIR}" >&2
    exit 1;
fi

if [[ -z "${NAME}" ]]; then
    echo "NAME not defined in ${SERVICE_DIR}/conf" >&2
    exit 2
fi

[[ "${docker_user}" != */ ]] && NAME="${dockeruser}/${NAME}"
NAME=${NAME#/}

if [[ -f "${DIR}/Dockerfile" ]]; then
    export SERVICE_TYPE="container"
fi

# If an argument is set and it is the executable, remove argument and set executable.
if [[ -n "${1}" ]]; then
    # specifically asked for default executable.
    if [[ "${1}" == '--' ]]; then
        shift 1
    else
        case "${1}" in
            dependancy_map|script_path)
                _cmd_file=${SCRIPT_DIR}/function/${1}
                PATH="${SCRIPT_DIR}/function:${PATH}" ${_cmd_file} "${@:2}"
                exit $?
                ;;
            *)
                path="$(PATH="${SCRIPT_DIR}/function:${PATH}" "${SCRIPT_DIR}/function/script_path")"
                candidate="$(PATH="${SCRIPT_DIR}/function:${path}" /usr/bin/which "${1}")"
                if [[ -n "${candidate}" ]]; then
                    _cmd_file="${candidate}"
                    shift 1
                fi
        esac
    fi
fi


# If executable not found assume default executable.
if [[ -z "${_cmd_file}" ]];then
    command="$("${SCRIPT_DIR}/function/script_path" 1)"
    if [[ ( -n "${command}" ) && ( -x "${command:0:-1}/default" ) ]];then
        _cmd_file="${command:0:-1}/default"
    else
        # Executable command not found, show help and exit.
        load_help "${0}" "${SERVICE_DIR}"
        exit 1
    fi
fi

# This script could be called recursively.
# Storing PATH of first invocation of this script. 
if [[ -z "${__OLD_PATH}" ]]; then
    export __OLD_PATH="${PATH}"
fi

if [[ -z "${path}" ]]; then
    path="$(PATH="${SCRIPT_DIR}/function:${PATH}" "${SCRIPT_DIR}/function/script_path")"
fi

PATH="${SCRIPT_DIR}/function:${path}${__OLD_PATH}"
"${_cmd_file}" "$@"
