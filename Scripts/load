#!/bin/bash

load_help () {
    echo "Usage: $1 $2 [command [args ...]]"
    echo "Commands"
    local cpath
    IFS=: read -r -a cpath<<<"${SCRIPT_DIR}/function:${path}"
    mapfile -t commands <<< "$(/usr/bin/uniq <(IFS=: /usr/bin/find "${cpath[@]}" -maxdepth 1 -executable -type f -printf '%f\n' | /usr/bin/sort))"
    for file in "${commands[@]}"; do
	echo $'\t'"${file}"
    done
}

export SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
export SCRIPT_DIR="$(dirname "${SCRIPT_PATH}")"

include_paths=()
if [[ (-n "${HOME}") && (-f "${HOME}/.cloudscript") ]]; then
    conf_file="${HOME}/.cloudscript"
elif [[ -f "/etc/cloudscript.conf" ]]; then
    conf_file="/etc/cloudscript.conf"
fi
if [[ (-n "${conf_file}") ]]; then
    ESCAPED_HOME=$(printf '%s\n' "$HOME" | sed -e 's/[\/&]/\\&/g')
    mapfile -t dirs<<<"$(grep -e '^\s*include_dir\s*=' "${conf_file}" | sed -e 's/.*=\s*\(.*\)$/\1/' -e 's/\s*$//' -e 's/^~/'${ESCAPED_HOME}'/')"
    if [[ (${#dirs[@]} -ne 1) || (-n ${dirs[0]}) ]]; then
        include_paths+=("${dirs[@]}")
    fi
    image_prefix="$(grep -e '^\s*image_prefix\s*=' "${conf_file}" | sed 's/.*=\s*\(.*\)$/\1/'| sed 's/\s*$//' | tail -1)"
fi
[[ ${#include_paths[@]} -eq 0 ]] && include_paths=(".")
# TAG="$1"

if [[ "$1" != ?(.)?(.)/* ]]; then
    for dir in "${include_paths[@]}"; do
        SERVICE_DIR="${dir%/}/${1%/}"
        if [[ -d "${SERVICE_DIR}" ]]; then
            break;
        fi
    done
else
    SERVICE_DIR=$1
fi
shift

export DIR="$(realpath -s ${SERVICE_DIR})"

if [[ ! -d "${DIR}" ]]; then
    echo "SERVICE directory ${DIR} not found while checking for directory ${SERVICE_DIR}" >&2
    exit 1
fi

export ASSET="${DIR}/Assets"
export DATA="${DIR}/Data"

export SERVICE_DIR

#unset all configuration variable
source "${SCRIPT_DIR}/conf"
_conf_file="${DIR}/conf"
if [[ -f "${_conf_file}" ]]; then
    # export all defined variables in the configuration file.
    # cd "${DIR}"
    set -a
    source "${_conf_file}"
    set +a
fi

case "${1}" in
    dependancy_map|script_path)
        _cmd_file=${SCRIPT_DIR}/function/${1}
        PATH="${SCRIPT_DIR}/function:${PATH}" ${_cmd_file} "${@:2}"
        exit $?
        ;;
esac

if [[ ! -f "${_conf_file}" ]]; then
    echo "CONFIGURATION FILE not found in ${SERVICE_DIR}" >&2
    exit 1
fi

if [[ -z "${NAME}" ]]; then
    echo "NAME not defined in ${SERVICE_DIR}/conf" >&2
    exit 2
fi

if [[ -n "${image_prefix}" ]]; then
    docker_user="${image_prefix}"
fi

if [[ -f "${DIR}/Dockerfile" ]]; then
    export SERVICE_TYPE="container"
fi

NAME=${docker_user%/}/${NAME}

# If an argument is set and it is the executable, remove argument and set executable.
if [[ -n "${1}" ]]; then
    # specifically asked for default executable.
    if [[ "${1}" == '--' ]]; then
        shift 1
    else
        path="$(PATH="${SCRIPT_DIR}/function:${PATH}" "${SCRIPT_DIR}/function/script_path")"
        candidate="$(PATH="${SCRIPT_DIR}/function:${path}" /usr/bin/which "${1}")"
        if [[ -n "${candidate}" ]]; then
            _cmd_file="${candidate}"
            shift 1
        fi
    fi
fi


# If executable not found assume default executable.
if [[ -z "${_cmd_file}" ]];then
    command="$("${SCRIPT_DIR}/function/script_path" 1)"
    if [[ ( -n "${command}" ) && ( -x "${command:0:-1}/default" ) ]];then
        _cmd_file="${command:0:-1}/default"
    else
        # Executable command not found, show help and exit.
        load_help "${0}" "${SERVICE_DIR}"
        exit 1
    fi
fi

# This script could be called recursively.
# Storing PATH of first invocation of this script. 
if [[ -z "${__OLD_PATH}" ]]; then
    export __OLD_PATH="${PATH}"
fi

if [[ -z "${path}" ]]; then
    path="$(PATH="${SCRIPT_DIR}/function:${PATH}" "${SCRIPT_DIR}/function/script_path")"
fi

PATH="${SCRIPT_DIR}/function:${path}${__OLD_PATH}"
export PATH
"${_cmd_file}" "$@"
