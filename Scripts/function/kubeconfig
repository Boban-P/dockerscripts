#!/bin/bash

set -e

function show_help() {
echo "Usage: $0 options search_dir file[, file...]
Create kubernets yaml file from configuration values and appy delete or print yaml file.
"
echo "Options:
--gcloud  [projectname] : deploy to gcloud, used for retrieving image.
--print                 : do not deploy print generated configuration file.
--delete                : delete deployment
--help                  : show this help and exit
"
}

files=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            show_help
            exit
            ;;
        --gcloud)
            if [[ (-z "${2}") || ("$2" != "--"*) ]]; then
                PROJECT="$(gcloud config get-value project)"
            else
                PROJECT="$2"
                shift
            fi
            IMAGE_PREFIX="gcr.io/${PROJECT}/"
            ;;
        --print)
            __PRINT__ONLY=1
            ;;
        --delete)
            __DELETE_DEPLOYMENT=1
            ;;
        -*)
            >&2 echo "unknown option '$1' in commandline" && exit 1
            ;;
        *)
            files+=("$1")
            ;;
    esac
    shift
done
set - "${files[@]}"

source=()
for file in "${@:2}"; do
    if [[ -f "${DIR}/${file}.yaml" ]]; then
        source+=("$(cat "${DIR}/${file}.yaml")")
    elif [[ -f "${DIR}/${file}.template.yaml" ]]; then
        source+=("$(kubeProcessFile "${DIR}/${file}.template.yaml")")
    # elif [[ -f "${base_DIR}/${file}.yaml" ]]; then
    #     source+=("$(cat "${base_DIR}/${file}.yaml")")
    elif [[ -f "${1}/${file}.template.yaml" ]]; then
        source+=("$(kubeProcessFile "${1}/${file}.template.yaml")")
    else
        >&2 echo "the file, $file.yaml or $file.template.yaml not found" && exit 1
    fi
done

if [[ -n "${__PRINT__ONLY}" ]]; then
    printf "%s\n---\n" "${source[@]}"
    exit 0
fi

if [[ -z "${__DELETE_DEPLOYMENT}" ]]; then
    kubectl apply -f <(printf "%s\n---\n" "${source[@]}")
else
    kubectl delete -f <(printf "%s\n---\n" "${source[@]}")
fi
