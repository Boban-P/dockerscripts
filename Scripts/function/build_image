#!/bin/bash

set -e

show_help() {
    echo "$(tput bold)Usage:$(tput sgr0) $(basename "$(realpath "${BASH_SOURCE[0]}")") [option]"
    echo "$(tput bold)Options:$(tput sgr0)"
    echo $'\t'"-f|--force"$'\t'"force rebuilding if exists"
    echo $'\t'"--no-recurse"$'\t'"do not build child"
    echo $'\t'"--recurse"$'\t'"build children recursively"
    echo $'\t'"--depth"$'\t'"test upto this depth for building children"
    echo $'\t'"--gcloud"$'\t'"build with gcloud build "
    echo $'\t'"--project projectid"$'\t'"gcloud project id"
    echo $'\t'"-h|--help"$'\t'"print this help and exit"
}


function generic_build() {
    # run pre build script
    prebuildscript="${DIR}/prebuild.sh"
    if [[ (-f "${prebuildscript}") && (-x "${prebuildscript}") ]]; then
        ${prebuildscript}
    fi
    ${BUILD_COMMAND}
    postbuildscript="${DIR}/postbuild.sh"
    if [[ (-f ${postbuildscript}) && (-x "${postbuildscript}") ]]; then
        ${postbuildscript}
    fi
}

function docker_build() {
    # make build_arg
    args=()
    mapfile -t lines<<<"$(env | grep -e '^INSTALL_ARG_')"
    if [[ ("${#lines[@]}" -gt 1) || (-n "${lines[0]}") ]]; then
        for line in "${lines[@]}"; do
            args+=(--build-arg "${line/#INSTALL_ARG_/}")
        done
    fi
    DOCKER_BUILDKIT=1 docker build "${args[@]}" -t "${NAME}" "${DIR}"
    [[ -z "${VERSION}" ]] || docker tag "${NAME}" "${NAME}-${VERSION}"
}

function mkgconf() {
    tag="$1"
    shift
    DOCKER_DIR="$1"
    shift

buildargs=(build -t "${tag}")
substitutes=()
for item in "$@"; do
    buildargs+=(--build-arg ${item%%=*}=\${_${item%%=*}})
    substitutes+=("_${item%%=*}: \"${item#*=}\"")
done

mapfile -t images<<<"$(grep '^FROM ' "${DOCKER_DIR}/Dockerfile" | sed 's/^FROM \([^ ]*\)/\1/' | sort | uniq)"
if [[ ("${#images[@]}" -eq 1) && (-z "${images[0]}") ]]; then
    exit 1
fi
docker="$(cat "${DOCKER_DIR}/Dockerfile")"
altered=0
for image in "${images[@]}"; do
    if gcloud container images describe "gcr.io/${PROJECT}/${image}" >/dev/null 2>&1; then
        docker="$(printf "%s\n" "${docker}" | sed 's@^FROM '${image}'@FROM gcr.io/'${PROJECT}/${image}'@')"
    fi
done

printf "%s\n" "${docker}" >"${DOCKER_DIR}/gcloud.Dockerfile"
buildargs+=(--file "${DOCKER_DIR}/gcloud.Dockerfile")

printf "%s" "steps:
- name: 'gcr.io/cloud-builders/docker'
  args: [$(printf "'%s',\n         " "${buildargs[@]}")'${DOCKER_DIR}']
substitutions:$(printf "\n    %s" "${substitutes[@]}")
images: [
    '${tag}'
]
"
}

function gcloud_build() {
    TAG="gcr.io/${PROJECT}/${NAME}"
    # make build_arg
    args=()
    mapfile -t lines<<<"$(env | grep -e '^INSTALL_ARG_')"
    if [[ ("${#lines[@]}" -gt 1) || (-n "${lines[0]}") ]]; then
        for line in "${lines[@]}"; do
            args+=("${line/#INSTALL_ARG_/}")
        done
    fi
    if [[ ! -f "${DIR}/.gcloudignore" ]]; then
        local ignores=(.gcloudignore)
        [[ ! -f "${DIR}/.gitignore" ]] || ignores+=("#!include:.gitignore")
        [[ ! -f "${DIR}/.dockerignore" ]] || ignores+=("#!include:.dockerignore")
        printf "%s\n" "${ignores[@]}" >"${DIR}/.gcloudignore"
    fi
    cd ${DIR} && gcloud builds submit --config <(mkgconf "${TAG}" "." "${args[@]}")
}

function docker_inspect() {
    docker image inspect "$1"
}

function gcloud_inspect() {
    gcloud container images describe "gcr.io/${PROJECT}/${1}"
}

TARGET="local"
DEPTH=
args=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force)
	    FORCE_BUILD_IMAGE=true
            ;;
        -h|--help)
            show_help
            exit
            ;;
        --no-recurse)
            DEPTH=1
            ;;
        --recurse)
            DEPTH=
            ;;
        --depth)
            DEPTH=$(( 0 + ${2} ))
            shift 1
            ;;
        --gcloud)
            TARGET="gcloud"
            ;;
        --project)
            PROJECT="$2"
            shift
            ;;
        *)
            args+=("$1")
            ;;
    esac
    shift 1
done
set -- "${args[@]}"

ADDITIONAL_ARGS=()
case "${TARGET}" in
    local)
        BUILD_COMMAND=docker_build
        INSPECT_COMMAND=docker_inspect
        ;;
    gcloud)
        if [[ -z "${PROJECT}" ]]; then
            PROJECT="$(gcloud config get-value project)"
        fi
        BUILD_COMMAND=gcloud_build
        ADDITIONAL_ARGS=(--gcloud --project "${PROJECT}")
        INSPECT_COMMAND=gcloud_inspect
        ;;
esac

args=()
if [[ -z "${DEPTH}" ]]; then
    args+=(--recurse)
else
    args+=(--depth "${DEPTH}")
fi

if [[ -z "${FORCE_BUILD_IMAGE}" ]]; then
    if [[ (-z "${DEPTH}") || ("${DEPTH}" -gt 1) ]]; then
    # if [[ "${DO_RECURSE:-0}" == "1" ]]; then
        mapfile -t images<<<"$(dependancy_map --image "${args[@]}")"
        for image in "${images[@]}"; do
            if [[ -n "${image}" ]]; then
                docker_inspect "${image}" >/dev/null 2>&1 || docker pull "$image"
            fi
        done
        mapfile -t packages<<<"$(dependancy_map "${args[@]}")"
        for package in "${packages[@]}"; do
            if [[ (-n "${package}") && (-f "${package}/conf") ]]; then
                "${SCRIPT_PATH}" "${package}" build_image --no-recurse "${ADDITIONAL_ARGS[@]}"
            fi
        done
    fi
    if [[ "${SERVICE_TYPE}" == "container" ]]; then
        ${INSPECT_COMMAND} "${NAME}" >/dev/null 2>&1 || generic_build
    fi
else
    if [[ (-z "${DEPTH}") || ("${DEPTH}" -gt 1) ]]; then
    # if [[ "${DO_RECURSE:-0}" == "1" ]]; then
        mapfile -t images<<<"$(dependancy_map --image "${args[@]}")"
        for image in "${images[@]}"; do
            if [[ -n "${image}" ]]; then
                docker_inspect "${image}" >/dev/null 2>&1 || docker pull "${image}"
            fi
        done
        mapfile -t packages<<<"$(dependancy_map "${args[@]}")"
        for package in "${packages[@]}"; do
            if [[ (-n "${package}") && (-f "${package}/conf") ]]; then
                "${SCRIPT_PATH}" "${package}" build_image --force --no-recurse "${ADDITIONAL_ARGS[@]}"
            fi
        done
    fi
    if [[ "${SERVICE_TYPE}" == "container" ]]; then
        generic_build
    fi
fi
