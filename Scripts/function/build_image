#!/bin/bash

show_help() {
    echo "$(tput bold)Usage:$(tput sgr0) $(basename "$(realpath "${BASH_SOURCE[0]}")") [option]"
    echo "$(tput bold)Options:$(tput sgr0)"
    echo $'\t'"-f|--force"$'\t'"force rebuilding if exists"
    echo $'\t'"--no-recurse"$'\t'"do not build child"
    echo $'\t'"--recurse"$'\t'"build children recursively"
    echo $'\t'"--depth"$'\t'"test upto this depth for building children"
    echo $'\t'"-h|--help"$'\t'"print this help and exit"
}


function docker_build() {
    # run pre build script
    prebuildscript="${DIR}/prebuild.sh"
    if [[ (-f "${prebuildscript}") && (-x "${prebuildscript}") ]]; then
        ${prebuildscript} || exit $?
    fi
    # make build_arg
    args=()
    mapfile -t lines<<<"$(env | grep -e '^INSTALL_ARG_')"
    for line in "${lines[@]}"; do
        [[ -n "$line" ]] && args+=(--build-arg "${line/#INSTALL_ARG_/}")
    done
    DOCKER_BUILDKIT=1 docker build "${args[@]}" -t "${NAME}" "${DIR}" || exit $?
    postbuildscript="${DIR}/postbuild.sh"
    if [[ (-f ${postbuildscript}) && (-x "${postbuildscript}") ]]; then
        ${postbuildscript}
    fi
}

DEPTH=
args=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force)
	    FORCE_BUILD_IMAGE=true
            ;;
        -h|--help)
            show_help
            exit
            ;;
        --no-recurse)
            DEPTH=1
            ;;
        --recurse)
            DEPTH=
            ;;
        --depth)
            DEPTH=$(( 0 + ${2} ))
            shift 1
            ;;
        *)
            args+=("$1")
            ;;
    esac
    shift 1
done
set -- "${args[@]}"

args=()
if [[ -z "${DEPTH}" ]]; then
    args+=(--recurse)
else
    args+=(--depth "${DEPTH}")
fi

if [[ -z "${FORCE_BUILD_IMAGE}" ]]; then
    if [[ (-z "${DEPTH}") || ("${DEPTH}" -gt 1) ]]; then
    # if [[ "${DO_RECURSE:-0}" == "1" ]]; then
        mapfile -t images<<<"$(dependancy_map --image "${args[@]}")"
        for image in "${images[@]}"; do
            if [[ -n "${image}" ]]; then
                docker image inspect "${image}" >/dev/null 2>&1 || docker pull "$image" || exit 2
            fi
        done
        mapfile -t packages<<<"$(dependancy_map "${args[@]}")"
        for package in "${packages[@]}"; do
            if [[ (-n "${package}") && (-f "${package}/conf") ]]; then
                "${SCRIPT_PATH}" "${package}" build_image --no-recurse || exit $?
            fi
        done
    fi
    if [[ "${SERVICE_TYPE}" == "container" ]]; then
        docker image inspect "${NAME}" >/dev/null 2>&1 || docker_build || exit $?
    fi
else
    if [[ (-z "${DEPTH}") || ("${DEPTH}" -gt 1) ]]; then
    # if [[ "${DO_RECURSE:-0}" == "1" ]]; then
        mapfile -t images<<<"$(dependancy_map --image "${args[@]}")"
        for image in "${images[@]}"; do
            if [[ -n "${image}" ]]; then
                docker image inspect "${image}" >/dev/null 2>&1 || docker pull "${image}" || exit 2
            fi
        done
        mapfile -t packages<<<"$(dependancy_map "${args[@]}")"
        for package in "${packages[@]}"; do
            if [[ (-n "${package}") && (-f "${package}/conf") ]]; then
                "${SCRIPT_PATH}" "${package}" build_image --force --no-recurse || exit $?
            fi
        done
    fi
    if [[ "${SERVICE_TYPE}" == "container" ]]; then
        docker_build || exit $?
    fi
fi
